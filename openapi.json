{
  "openapi": "3.0.1",
  "info": {
    "title": "Геймтон DatsEdenSpace",
    "version": "v1",
    "description": "\n<img src='./img/1.jpeg' />\n\n**Легенда:** Жители межгалактического пространства страдают от космического мусора и больше не могут \"вывозить\" сами! Чтобы их спасти, необходимо собрать мусор со всех планет и доставить его на планету с заводами по переработке.\n\n  **Этапы** (время — UTC +03:00):\n\n  - 1-й день — 05.04.2024\n    - Тренировочные раунды: с 17:00 до 22:00\n  - 2-й день — 06.04.2024:\n    - Тренировочные раунды: с 10:00 до 14:00\n    - Финальные раунды: с 14:00 до 20:00\n    \n  Расписание раундов можно узнать по API. \n    \n  ### Отважным космическим спасателям предоставляется:\n  1. Карта\n  2. Сверхмощный корабль с гиперпространственным двигателем\n  3. API\n  \n  **Глосcарий (Термины):**\n\n  - Раунд — игра делится на отдельные карты, которые доступны в определенный период времени. Раунды могут быть тестовыми и финальными.\n  - Карта — схема планет, расстояний между ними и космического мусора.\n  - Попытка — в тестовых раундах игрок может сбрасывать свой прогресс и начинать карту сначала.\n  - Корабль — объект, управляемый пользователем для перелётов и сборки мусора. Имеет грузовой отсек с определёнными размерами.\n  - Планеты — точки для перёлетов на карте. Каждая имеет уникальное имя и свой мусор на орбите.\n  - Eden — имя планеты для выгрузки мусора. Присутствует на всех картах.\n  - Космический мусор — фигуры, которые нужно собрать на планете и  вывезти на переработку. Каждая единица мусора состоит из координат, описывающих его геометрию, и имеет уникальный ID.\n  - Горючее — топливо, затраченное на перелёты между планетами. Является вторым по важности (после мусора) показателем в итоговой оценке эффективности бота.\n  - Разлёт мусора — процесс разброса мусора с планеты на соседние при невыполнении определённых условий.\n \n# Карта\n\n  Игрокам предоставляется карта (GET /player/universe), которая содержит информацию о гиперпереходах между всеми планетами с указанием необходимого количества топлива для перемещения. Так как гиперпереход происходит мгновенно, разное количество топлива, требуемое на движение между планетами, не влияет на скорость обработки запроса.\n\n  На карте также есть информация о возможных переходах между планетами. Например, между некоторыми планетами может не быть сообщения, а между другими — движение может быть только в одну сторону.\n\n  Гиперпространство нестабильно, поэтому каждое последующее перемещение по одному и тому же участку увеличивает затраты топлива на нём на 10 пунктов.\n\n  ***Пример:***  Вы совершили переход с планеты A на планету B. На первое прохождение этого пути уйдет 100 единиц топлива. При повторном прохождении этого же участка расход будет 100 + 10 = 110, в третий раз — 120.\n\n# Корабль\n  Команда имеет один космический корабль с размерами трюма (X, Y) — например (5, 10). Размеры соответствуют \"capacityX\", \"capacityY\" в GET /player/universe.\n\n   \n# Космический мусор\n  \n  Космический мусор имеет разную форму. Он представлен в виде массива координат.\n  \n  ***Пример:*** На картинке ниже фигура будет иметь следующие координаты: \n\"someId\": [[0, 0], [0, 1], [1, 1]]\n\n  <img src='./img/002.png' class='image2' />\n\n\n  Блок с координатами (0, 0) находится в левом верхнем углу.\n\n  <img src='./img/003.jpg' class='image3' />\n\n  Для оптимального размещения в корабле фигуры можно вращать на плоскости, главное — чтобы они не выходили за грузовое отделение корабля и имели уникальные координаты блоков.\n  При этом они могут размещаться как вплотную так и порознь(между ними может быть пустое пространство).\n  Также нельзя отразить фигуру зеркально.\n\n  ***Пример:*** Правильное расположение фигур мусора в грузовом отсеке:\n  \n  <img src='./img/004.jpeg' class='image4' />  \n\n  # Механика игры\n\n  **Перемещение** \n\n  Космический корабль перемещается между планетами, и в момент остановки на планете происходит автоматическое сканирование пространства, чтобы узнать, какой там есть мусор (в ответе API /player/travel). \n\n  Остановкой на планете считается последняя указанная планета в запросе API /player/travel.\n\n ***Пример:*** В API запросе указан массив планет: B, C, A.\n  В данном запросе корабль проследует к планете B, затем к планете C и остановится на планете A.\n\n\n   При остановке на планете с мусором запускается таймер на 10 секунд.\n   В течение этого времени игрокам необходимо:\n   1. произвести валидную загрузку\n  2. покинуть планету\n\n  Если хотя бы одно из условий выше не соблюдено, мусор с этой планеты разлетается случайным образом по планетам, связанным переходами с текущей. Текущая планета остаётся пустой, но на неё может аналогичным образом прилететь мусор с соседних планет.\n    \n  Исключением является ситуация, когда мусор с планеты полностью вывезли нормальным образом (загрузили весь в корабль). Тогда на неё не может прилететь мусор с других планет.\n  \n  Также мусор не может прилететь на стартовую планету Earth и на планету-переработчик Eden.\n\n**Валидная загрузка:**\n\n  1. Если кузов пустой, загрузка должна составлять минимум 30% объёма грузового отсека.\n  2. Если на момент остановки на какой-то планете грузовой отсек не пуст, необходимо поднять загрузку еще минимум на 5% от размера трюма.\n  3. Координаты фигур мусора не могут пересекаться.\n  4. Координаты фигур мусора не могут выходить за пределы грузового отсека\n\n  Исключением для правила дозагрузки на 5% является ситуация, когда в результате такой загрузки будет достигнуто 100% объёма кузова.\n  Исключением для правил 5% и 30% является ситуация, когда с планеты забирают последний мусор.\n\nЗначение по процентам приводим к целому с округлением в большую сторону.\n\n  ***Пример:*** Объём кузова = 81 (x = 9, y = 9)\n  - 81 * 0.3 = 24.3, округляем в большую сторону и получаем 25 — минимальное количество ячеек загрузки\n  - 81 * 0.05 = 4.05, округляем в большую сторону и получаем 5 — минимальное количество ячеек загрузки на планете, если корабль уже не пустой. То есть, если уже было загружено 25 ячеек, то при повторном запросе на загрузку в корабле должно быть заполнено не менее 30 ячеек (25 + 5).\n\n\n**Выгрузка мусора**\n\n\n  Выгрузка мусора происходит автоматически при прохождении планеты-переработчика (Eden). Останавливаться не обязательно, достаточно, чтобы в списке планет API запроса /player/travel была планета Eden.\n\n  ***Пример:***\n   Планета-переработчик — планета А. Корабль находится на планете B, в API запросе будет такая последовательность прыжков: E, D, A, S. Как видно, по пути была планета А, значит ровно в этот момент произойдет выгрузка, и на планету S корабль попадёт уже пустым.\n\n  В момент дозагрузки весь мусор из грузового отсека, который не был указан в новом варианте загрузки, будет сгружен на планету.\n\n\n\n# Раунды\n\n  Игра делится на несколько карт.\n  На прохождение каждой карты (раунда)  выделяется время. Расписание раундов доступно в API /player/rounds (время — UTC).\n\n\n  Во время тренировочных раундов можно проходить одну карту сколько угодно раз. Однако начинать сначала можно не чаще 1 раза в 10 минут (API /player/reset).\n\n  Во время финала карту можно пройти только 1 раз. То есть, запрос API /player/reset будет недоступен.\n\n  Мы ожиданием, что все игры пройдут согласно расписанию, но реальность может внести свои коррективы. Поэтому стоит учитывать, что расписание раундов может быть изменено - об этом мы сразу же сообщим в чате и в API /player/rounds\n\n\n# Кто победит\n\n  Выиграет та команда, сумма (за все финальные карты) вывезенного груза которой будет максимальна при минимальном количестве затраченного топлива. \n\n  Если у двух команд будет одинаковое количество мусора и топлива — выиграет та команда, которая вывезла мусор быстрее.\n  \n  Статистику по раундам можно смотреть по ссылке — [Статистика](https://datsteam.dev/datsedenspace/statistics).\n  \n# Достижения\n\n  Команда, которой удастся первой осуществить идеальную загрузку кузова на 100% в последнем финальном раунде, получит награду - фирменные рюкзаки на каждого участника.\n\n  Кроме этого, есть дополнительные 3 секретные ачивки(на 1, 9, 10 раундах), при их достижении команды получат подарок.\n\n  Обратите внимание каждый тип достижения может получить только одна команда, которая первой выполнила его условия.\n\n  Следите за трансляцией финала.\n  \n  \n        \n\n# API\n\n  На сервере установлен лимит количества запросов в секунду. Сейчас это 4 запроса в секунду (значение может быть изменено в ходе игры).\n\n  Вы уже получили свой токен при регистрации. Это означает, что в каждый запрос необходимо добавлять заголовок X-Auth-Token с полученным вами значением.\n\n\n  **Cервер:** https://datsedenspace.datsteam.dev "
  },
  "servers": [
    {
      "url": "https://datsedenspace.datsteam.dev"
    }
  ],
  "paths": {
    "/player/universe": {
      "get": {
        "tags": [
          "Ship"
        ],
        "summary": "current player universe, planets and edges",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res.Player"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/puberr.Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/player/travel": {
      "post": {
        "tags": [
          "Ship"
        ],
        "summary": "travel to other planet",
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req.Travel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res.Travel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/puberr.Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/player/collect": {
      "post": {
        "tags": [
          "Ship"
        ],
        "summary": "tetris like game to collect garbage",
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req.Collect"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res.Collect"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/puberr.Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/player/reset": {
      "delete": {
        "tags": [
          "Round"
        ],
        "summary": "reset user game",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.AcceptedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/puberr.Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/player/rounds": {
      "get": {
        "tags": [
          "Round"
        ],
        "summary": "all rounds, start and end times, planet count and if it is currently playable",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res.RoundList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/puberr.Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "puberr.Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "request format is not valid"
          }
        }
      },
      "req.Collect": {
        "type": "object",
        "properties": {
          "garbage": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "example": {
              "71B2XMi": [
                [
                  2,
                  10
                ],
                [
                  2,
                  9
                ],
                [
                  2,
                  8
                ],
                [
                  3,
                  8
                ]
              ]
            }
          }
        }
      },
      "req.Travel": {
        "type": "object",
        "properties": {
          "planets": {
            "type": "array",
            "example": [
              "Reinger-77",
              "Earth"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "res.Collect": {
        "type": "object",
        "properties": {
          "garbage": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "example": {
              "71B2XMi": [
                [
                  2,
                  10
                ],
                [
                  2,
                  9
                ],
                [
                  2,
                  8
                ],
                [
                  3,
                  8
                ]
              ]
            }
          },
          "leaved": {
            "type": "array",
            "example": [
              "RWEaughM",
              "90B2XMi"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "res.Planet": {
        "type": "object",
        "properties": {
          "garbage": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "example": {
              "6fTzQid": [
                [
                  0,
                  0
                ],
                [
                  0,
                  1
                ],
                [
                  1,
                  1
                ]
              ],
              "RVnTkM59": [
                [
                  0,
                  0
                ],
                [
                  0,
                  1
                ],
                [
                  1,
                  1
                ],
                [
                  2,
                  1
                ],
                [
                  1,
                  2
                ]
              ]
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "res.PlanetDiff": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "example": "Earth"
          },
          "fuel": {
            "type": "integer",
            "example": 100
          },
          "to": {
            "type": "string",
            "example": "Reinger"
          }
        }
      },
      "res.Player": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "MyTeam"
          },
          "ship": {
            "$ref": "#/components/schemas/res.Ship"
          },
          "universe": {
            "type": "array",
            "example": [
              [
                "Earth",
                "Reinger",
                100
              ],
              [
                "Reinger",
                "Earth",
                100
              ],
              [
                "Reinger",
                "Larkin",
                100
              ]
            ],
            "items": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      },
      "res.Round": {
        "type": "object",
        "properties": {
          "startAt": {
            "type": "string",
            "example": "2024-04-04 14:00:00"
          },
          "endAt": {
            "type": "string",
            "example": "2024-04-04 14:30:00"
          },
          "isCurrent": {
            "type": "boolean",
            "example": false
          },
          "name": {
            "type": "string",
            "example": "round 1"
          },
          "planetCount": {
            "type": "integer",
            "example": 100
          }
        }
      },
      "res.RoundList": {
        "type": "object",
        "properties": {
          "rounds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/res.Round"
            }
          }
        }
      },
      "res.Ship": {
        "type": "object",
        "properties": {
          "capacityX": {
            "type": "integer",
            "example": 8
          },
          "capacityY": {
            "type": "integer",
            "example": 11
          },
          "fuelUsed": {
            "type": "integer",
            "example": 1000
          },
          "garbage": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "example": {
              "6fTzQid": [
                [
                  0,
                  0
                ],
                [
                  0,
                  1
                ],
                [
                  1,
                  1
                ]
              ],
              "RVnTkM59": [
                [
                  2,
                  2
                ],
                [
                  2,
                  3
                ],
                [
                  3,
                  3
                ],
                [
                  5,
                  3
                ],
                [
                  3,
                  5
                ]
              ]
            }
          },
          "planet": {
            "$ref": "#/components/schemas/res.Planet"
          }
        }
      },
      "res.Travel": {
        "type": "object",
        "properties": {
          "fuelDiff": {
            "type": "integer",
            "example": 1000
          },
          "planetDiffs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/res.PlanetDiff"
            }
          },
          "planetGarbage": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "example": {
              "6fTzQid": [
                [
                  0,
                  0
                ],
                [
                  0,
                  1
                ],
                [
                  1,
                  1
                ]
              ],
              "RVnTkM59": [
                [
                  0,
                  0
                ],
                [
                  0,
                  1
                ],
                [
                  1,
                  1
                ],
                [
                  2,
                  1
                ],
                [
                  1,
                  2
                ]
              ]
            }
          },
          "shipGarbage": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "example": {
              "71B2XMi": [
                [
                  2,
                  10
                ],
                [
                  2,
                  9
                ],
                [
                  2,
                  8
                ],
                [
                  3,
                  8
                ]
              ]
            }
          }
        }
      },
      "rest.AcceptedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "X-Auth-Token",
        "in": "header"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}